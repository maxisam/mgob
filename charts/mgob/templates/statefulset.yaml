{{- $fullName := include "common.names.fullname" . -}}
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "common.names.fullname" .  }}
  replicas: 1
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/configMap: {{ toYaml .Values.config | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      containers:
      - name: mgob
        image: {{ include "mgob.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote}}
        args:
          - "-LogLevel={{ .Values.logLevel }}"
        env:
          {{- range $envVar := .Values.env }}
          - name: {{ $envVar.name }}
            value: {{ $envVar.value }}
          {{- end }}
        ports:
          - name: http
            containerPort: {{ .Values.service.ports.http }}
            protocol: TCP
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            port: http
            path: /status
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- else if .Values.customLivenessProbe }}
        livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            port: http
            path: /status
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- else if .Values.customReadinessProbe }}
        readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          successThreshold: {{ .Values.startupProbe.successThreshold }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
        {{- else if .Values.customStartupProbe }}
        startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.resources }}
        resources: {{- toYaml .Values.resources | nindent 12 }}
        {{- end }}
        {{- if .Values.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: "mgob-storage"
          mountPath: "/storage"
        - name: "mgob-tmp"
          mountPath: "/tmp"
        - name: "mgob-tmp"
          mountPath: "/data"
        {{- range $name, $value := .Values.config }}
        - mountPath: "/config/{{ $name }}"
          name: config
          subPath: {{ $name | quote }}
        {{- end }}
        {{- range $secret := .Values.mountSecrets }}
        - mountPath: "/secret/{{ $secret.name }}"
          name: {{ $secret.name }}
        {{- end }}
      {{- if .Values.mongodb.enabled }}
      - name: mongodb
        image: {{ include "mongodb.image" . }}
        imagePullPolicy: {{ .Values.mongodb.image.pullPolicy | quote}}
        ports:
          - name: mongodb
            containerPort: {{ .Values.mongodb.port }}
            protocol: TCP
        volumeMounts:
        - name: {{ .Values.storage.restoreTmp.name }}
          mountPath: "/data/db"
        {{- if .Values.mongodb.securityContext.enabled }}
        securityContext: {{- omit .Values.mongodb.securityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.mongodb.resources }}
        resources: {{- toYaml .Values.mongodb.resources | nindent 12 }}
        {{- end }}
      {{- end }}
      initContainers:
        - name: init-cleanup
          image: busybox:1.34
          command: ['sh', '-c', 'find /tmp -not -name "mgob.db" -type f -delete']
          volumeMounts:
          - mountPath: /tmp
            name: mgob-tmp
      securityContext:
        {{ toYaml .Values.podSecurityContext | nindent 8 | trim }}
      serviceAccountName: {{ template "mgob.serviceAccountName" . }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ template "common.names.fullname" . }}-config
          items:
          {{- range $name, $value := .Values.config }}
          - key: {{ $name }}
            path: {{ $name }}
          {{- end }}
      {{- range $secret := .Values.secret }}
      - name: {{ $secret.name }}
        secret:
          secretName: {{ $secret.name }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.storage.longTerm.name }}
    spec:
      {{ toYaml .Values.storage.longTerm.spec | nindent 6 | trim }}
  - metadata:
      name: {{ .Values.storage.tmp.name }}
    spec:
      {{ toYaml .Values.storage.tmp.spec | nindent 6 | trim }}
  {{- if and .Values.mongodb.enabled .Values.storage.restoreTmp}}
  - metadata:
      name: {{ .Values.storage.restoreTmp.name }}
    spec:
      {{ toYaml .Values.storage.restoreTmp.spec | nindent 6 | trim }}    
  {{- end }}